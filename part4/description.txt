 При реализации иерархии наследования производный класс должен расширять
суперкласс новыми свойствами, для чего следует разобраться в предметной области
задачи. При описании полей можно использовать класс Optional.
 Классы-сущности должны быть отделены от классов с методами бизнес-логики.
 Использовать перечисления (enum) для описания полей с ограниченным набором
значений.
 Для сортировок наборов объектов можно использовать реализацию интерфейса
Comparator и его возможности. В частности thenComparing.
 При решении задачи можно использовать паттерн Factory Method.
 Все классы приложения должны быть грамотно структурированы по пакетам.
 Оформление кода должно соответствовать Java Code Convention.
 Параметры, необходимые для создания объектов, должны вводиться с помощью чтения
данных из файла (.txt). Среди данных в файле должны быть заведомо некорректная
информация. Должна присутствовать обработка некорректных данных инициализации
объекта.
 Код должен быть покрыт Unit-тестами.
 Запуск только с применением тестов.